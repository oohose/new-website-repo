// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id            String      @id @default(cuid())
  key           String      @unique
  name          String
  description   String?
  isPrivate     Boolean     @default(false)
  parentId      String?
  parent        Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[]  @relation("CategoryHierarchy")
  images        Image[]
  socialLinks   Json?       // Store social media links as JSON
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([parentId])
  @@index([isPrivate])
}

model Image {
  id           String   @id @default(cuid())
  title        String
  description  String?
  cloudinaryId String   @unique // Cloudinary public_id
  url          String   // Cloudinary secure_url
  width        Int?
  height       Int?
  format       String?
  bytes        Int?
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isHeader     Boolean  @default(false) // Category header image
  order        Int      @default(0) // For custom ordering
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([categoryId])
  @@index([isHeader])
  @@index([order])
}

enum Role {
  USER
  ADMIN
}